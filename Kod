#include <iostream>
#include <cstdlib>
#include <windows.h>
#include <stdio.h>
#include <conio.h>
#include <fstream>
#include <time.h>


using namespace std;
string nick;
int powrot_do_menu=0;
int atak_gracz,zycie_gracz,obrona_gracz, lvl_gracz=1, lvl_przeciwnik=1, zdobyte_dos, wymagane_dos=1;
int staty_sila=0,staty_wytrzymalosc=0,staty_odpornosc=0,staty_szczescie=0,staty_szybkosc=0, dostepne=20, rozdane;
int staty_suma_sila=1,staty_suma_wytrzymalosc=1,staty_suma_odpornosc=1,staty_suma_szczescie=1,staty_suma_szybkosc=1;
int walka_trwa=0, ukonczone_kampanie=0, atak_obliczony;
int nr_walki=0;




void nazwanie_postaci();
void menu_glowne();
void menu_gry_wyswietlanie();
void wczytanie_save();
void zapisanie_save();
void gra();
void gra_opcje();
void gra_kampania();
void gra_kampania_menu_gry(int atak_przeciwnik,int zycie_przeciwnik,int obrona_przeciwnik,int czyja_tura,string rodzaj_przecwnika);
void statystyki();
void obliczanie_statystyk();
int kampania_przeciwnik (int *atak, int *zycie, int *obrona, int *rodzaj);
int obliczanie_atak(int wybrany_atak,int rodzaj_przecwnika_int,int szczescie, int lvl_gracz, int lvl_przeciwnik,int obrona_przeciwnik, int atak_gracz, int czyja_tura, int *zycie_przeciwnik);
void wyswietlanie_ataku(int atak_obliczenia, int zadane_obrazenia, int czyja_tura,int wybrany_atak, int dodatkowa_akcja[] );
void przebieg_walki_wglad(int atak_przeciwnik, int zycie_przeciwnik, int obrona_przeciwnik, int czyja_tura, string rodzaj_przecwnika);
void przebieg_walki_zapis(int atak_obliczenia, int zadane_obrazenia, int czyja_tura, int dodatkowa_akcja[], int wybrany_atak);
int zmiana_zycia_p(int *zycie_przeciwnik_2, int obrona_przeciwnik, int zadane_obrazenia);
int wygrana_walka(int ilosc_walk, int atak_przeciwnik, int zycie_przeciwnik, int obrona_przeciwnik, int czyja_tura, string rodzaj_przecwnika);
int tura_przeciwnika(int rodzaj_przecwnika_int, int *czyja_tura, int atak_przeciwnik);
//int kampania_przeciwnik (int atak);



int main()
{
    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE),7);
    while(true)
    {
    menu_glowne();

    char menu_wybor;
    menu_wybor=getch();
    switch(menu_wybor)
    {
    case '1':
        {
            char usun[]="old_save.txt"; remove(usun);
            char stary[]="save.txt", nowy[]="old_save.txt"; rename(stary,nowy);

            staty_sila=0;staty_wytrzymalosc=0;staty_odpornosc=0;staty_szczescie=0;staty_szybkosc=0;dostepne=20,rozdane=0;

            nazwanie_postaci();

            powrot_do_menu=0;
            while(powrot_do_menu==0)
            {
                menu_gry_wyswietlanie();
                gra();
            }
        }
    break;
    case '2':
        {
            system("cls");
            powrot_do_menu=0;
            wczytanie_save();
            while(powrot_do_menu==0)
            {
                menu_gry_wyswietlanie();
                gra();
            }

        }
    break;
    case '3':
        {
            exit(0);
        }
    break;
    default:
        {
            cout<<"Brak wybranej opcji!"<<endl;
            Sleep(500);
        }
    }


    }
    return 0;
}

int rog_l_g=218,poz_kres=196,rog_p_g=191,  trojnik_prawo=195,trojnik_lewo=180, trojnik_dol=194 ,trojnik_gora=193;
int pion_kres=179, krzyzyk=197;
int rog_l_d=192              ,rog_p_d=217;

void nazwanie_postaci()
{
            system("cls");
            cout<<"Nazwij swoją postać:"<<endl;
            getline(cin,nick);
            int dlugosc_nicku;
            if(dlugosc_nicku=nick.length()>17)
            {
            system("cls");
            cout<<"Nazwa jest zbyt długa! Maksymalnie 17 znaki."<<endl;
            Sleep(1000);
            nazwanie_postaci();
            }
            else if(dlugosc_nicku=nick.length()<1)
            {
                system("cls");
            cout<<"Nie możesz pozostawić tego pola pustego!"<<endl;
            Sleep(1000);
            nazwanie_postaci();
            }
}

void menu_glowne()
{
    system("cls");
    cout<<char(rog_l_g); for(int i=0; i<21; i++) cout<<char(poz_kres); cout<<char(rog_p_g)<<endl;
    cout<<char(pion_kres)<<"Witaj w grze Wojownik"<<char(pion_kres)<<endl;
    cout<<char(trojnik_prawo); for(int i=0; i<21; i++) cout<<char(poz_kres); cout<<char(trojnik_lewo)<<endl;
    cout<<char(pion_kres)<<"1. Nowa gra.         "<<char(pion_kres)<<endl;
    cout<<char(pion_kres)<<"2. Kontynuuj.        "<<char(pion_kres)<<endl;
    cout<<char(pion_kres)<<"3. Wyjdź z gry.      "<<char(pion_kres)<<endl;
    cout<<char(rog_l_d); for(int i=0; i<21; i++) cout<<char(poz_kres); cout<<char(rog_p_d)<<endl;
}

void menu_gry_wyswietlanie()
{
    int dlugosc_nicku, miejsce;
    dlugosc_nicku=nick.length();
    miejsce=24-dlugosc_nicku;

    system("cls");
    cout<<char(rog_l_g); for(int i=0; i<24; i++) cout<<char(poz_kres); cout<<char(rog_p_g)<<endl;
    cout<<char(pion_kres)<<"        MENU GRY        "<<char(pion_kres)<<endl;
    cout<<char(trojnik_prawo); for(int i=0; i<24; i++) cout<<char(poz_kres); cout<<char(trojnik_lewo)<<endl;
    cout<<char(pion_kres); for(int i=0; i<miejsce/2; i++){cout<<" ";} cout<<nick; if(dlugosc_nicku%2!=0){cout<<" ";} for(int i=0; i<miejsce/2; i++){cout<<" ";} cout<<char(pion_kres)<<endl;

    cout<<char(trojnik_prawo); for(int i=0; i<24; i++) cout<<char(poz_kres); cout<<char(trojnik_lewo)<<endl;
    cout<<char(pion_kres)<<"1. Rozpocznij kampanię. "<<char(pion_kres)<<endl;
    cout<<char(pion_kres)<<"2. Wejdź do miasta.     "<<char(pion_kres)<<endl;
    cout<<char(pion_kres)<<"3. Postać.              "<<char(pion_kres)<<endl;
    cout<<char(pion_kres)<<"4. Glosariusz.          "<<char(pion_kres)<<endl;
    cout<<char(pion_kres)<<"5. Statystyki.          "<<char(pion_kres)<<endl;
    cout<<char(pion_kres)<<"6. Opcje.               "<<char(pion_kres)<<endl;
  //cout<<char(pion_kres)<<"                       "<<char(pion_kres)<<endl;
    cout<<char(rog_l_d); for(int i=0; i<24; i++) cout<<char(poz_kres); cout<<char(rog_p_d)<<endl;
}

void wczytanie_save()
{
    fstream plik;
    plik.open("save.txt",ios::in);
    if(plik.good()==false)
    {
        cout<<"Brak dostępnego zapisu gry!";
        powrot_do_menu=1;
    }
    else
    {
    cout<<"Gra jest wczytywana.";
    string linia;
    while(getline(plik,linia))
    {
       if(linia.find("Nick:")!=string::npos) {size_t pozycja=linia.find(":"); linia.erase(0,pozycja+1); nick=linia;}
       if(linia.find("Staty rozdane:")!=string::npos) {size_t pozycja=linia.find(":"); linia.erase(0,pozycja+1); rozdane=atoi(linia.c_str());}
       if(linia.find("Staty dostepne:")!=string::npos) {size_t pozycja=linia.find(":"); linia.erase(0,pozycja+1); dostepne=atoi(linia.c_str());}
       if(linia.find("Staty sila:")!=string::npos) {size_t pozycja=linia.find(":"); linia.erase(0,pozycja+1); staty_sila=atoi(linia.c_str());}
       if(linia.find("Staty wytrzymalosc:")!=string::npos) {size_t pozycja=linia.find(":"); linia.erase(0,pozycja+1); staty_wytrzymalosc=atoi(linia.c_str());}
       if(linia.find("Staty odpornosc:")!=string::npos) {size_t pozycja=linia.find(":"); linia.erase(0,pozycja+1); staty_odpornosc=atoi(linia.c_str());}
       if(linia.find("Staty szczescie:")!=string::npos) {size_t pozycja=linia.find(":"); linia.erase(0,pozycja+1); staty_szczescie=atoi(linia.c_str());}
       if(linia.find("Staty szybkosc:")!=string::npos) {size_t pozycja=linia.find(":"); linia.erase(0,pozycja+1); staty_szybkosc=atoi(linia.c_str());}
       if(linia.find("Lvl gracza:")!=string::npos) {size_t pozycja=linia.find(":"); linia.erase(0,pozycja+1); lvl_gracz=atoi(linia.c_str());}
       if(linia.find("Ukonczone kampanie")!=string::npos) {size_t pozycja=linia.find(":"); linia.erase(0,pozycja+1); ukonczone_kampanie=atoi(linia.c_str());}
       //if(linia.find("")!=string::npos) {size_t pozycja=linia.find(":"); linia.erase(0,pozycja+1); =atoi(linia.c_str());}
    }
    }
    plik.close();
    Sleep(500);
}

void zapisanie_save()
{
    system("cls");
    cout<<"Gra zostala zapisana.";

    fstream plik;
    plik.open("save.txt",ios::out);

    plik<<"Nick:"<<nick<<endl;
    plik<<"Staty rozdane:"<<rozdane<<endl;
    plik<<"Staty dostepne:"<<dostepne<<endl;
    plik<<"Staty sila:"<<staty_sila<<endl;
    plik<<"Staty wytrzymalosc:"<<staty_wytrzymalosc<<endl;
    plik<<"Staty odpornosc:"<<staty_odpornosc<<endl;
    plik<<"Staty szczescie:"<<staty_szczescie<<endl;
    plik<<"Staty szybkosc:"<<staty_szybkosc<<endl;
    plik<<"Lvl gracza:"<<lvl_gracz<<endl;
    plik<<"Ukonczone kampanie:"<<ukonczone_kampanie<<endl;
    //plik<<":"<<<<endl;


    plik.close();
    Sleep(500);
}

void gra()
{
    char wybor_opcji;
    wybor_opcji=getch();

    switch(wybor_opcji)
    {
    case '1':
        {
            gra_kampania();
        }
    break;
    case '5':
        {
            statystyki();
        }
    break;
    case '6':
        {
            gra_opcje();
        }
    break;
    default:
    {
        cout<<"Brak wybranej opcji!"<<endl;
        Sleep(500);
    }
    }
}

void gra_opcje()
{
    int opcje=0;

    while(opcje==0)
    {
        system("cls");
        cout<<char(rog_l_g); for(int i=0; i<26; i++) cout<<char(poz_kres); cout<<char(rog_p_g)<<endl;
        cout<<char(pion_kres)<<"          OPCJE           "<<char(pion_kres)<<endl;
        cout<<char(trojnik_prawo); for(int i=0; i<26; i++) cout<<char(poz_kres); cout<<char(trojnik_lewo)<<endl;
        cout<<char(pion_kres)<<"1. Powrót do gry.         "<<char(pion_kres)<<endl;
        cout<<char(pion_kres)<<"2. Zapisz grę.            "<<char(pion_kres)<<endl;
        cout<<char(pion_kres)<<"3. Wróć do menu głównego. "<<char(pion_kres)<<endl;
        cout<<char(rog_l_d); for(int i=0; i<26; i++) cout<<char(poz_kres); cout<<char(rog_p_d)<<endl;

        char wybor_opcji;
        wybor_opcji=getch();
        switch(wybor_opcji)
        {
            case '1': opcje=1; break;
            case '2': zapisanie_save(); break;
            case '3': {opcje=1; powrot_do_menu=1;} break;
            default: { cout<<"Brak wybranej opcji!"<<endl; Sleep(500);}
        }
    }
}

void gra_kampania()
{
    int poddanie=0;
    //Ilość walk w kampanii liczona
    int atak_przeciwnik=0, zycie_przeciwnik=0, obrona_przeciwnik=0, szczescie_przeciwnik=0, szybkosc_przeciwnik=0;



    srand(time(NULL));
    int rodzaj_przecwnika_int;
    string rodzaj_przecwnika;

    int czyja_tura=0; //0 - gracza, 1 - przeciwnika;

    rodzaj_przecwnika_int=rand()%3;
    //rodzaj_przecwnika_int=1;
    if(rodzaj_przecwnika_int==0) rodzaj_przecwnika="Szybki rozbojnik";
    if(rodzaj_przecwnika_int==1) rodzaj_przecwnika="Silny wojownik";
    if(rodzaj_przecwnika_int==2) rodzaj_przecwnika="Wilk";
    nr_walki++;


    kampania_przeciwnik(&atak_przeciwnik,&zycie_przeciwnik,&obrona_przeciwnik,&rodzaj_przecwnika_int);
    //atak_przeciwnik=kampania_przeciwnik(atak_przeciwnik);

    fstream plik;
    plik.open("przebieg_walki.txt",ios::out|ios::trunc);
    plik.close();


    while(poddanie==0)
    {

        gra_kampania_menu_gry(atak_przeciwnik,zycie_przeciwnik,obrona_przeciwnik,czyja_tura, rodzaj_przecwnika);

        char wybor_opcji;
        wybor_opcji=getch();
        switch(wybor_opcji)
    {
    case '1':
        {//Silny atak
            int atak=1;
            obliczanie_atak(atak, rodzaj_przecwnika_int, staty_szczescie, lvl_gracz, lvl_przeciwnik, obrona_przeciwnik, atak_gracz, czyja_tura, &zycie_przeciwnik);
            czyja_tura=1;
            Sleep(1000);
            gra_kampania_menu_gry(atak_przeciwnik,zycie_przeciwnik,obrona_przeciwnik,czyja_tura, rodzaj_przecwnika);
            tura_przeciwnika(rodzaj_przecwnika_int, &czyja_tura,atak_przeciwnik);
        }
    break;
    case '2':
        {//Szybki atak
            int atak=0;
            obliczanie_atak(atak, rodzaj_przecwnika_int,staty_szczescie, lvl_gracz, lvl_przeciwnik, obrona_przeciwnik, atak_gracz, czyja_tura, &zycie_przeciwnik);
            czyja_tura=1;
            Sleep(1000);
            gra_kampania_menu_gry(atak_przeciwnik,zycie_przeciwnik,obrona_przeciwnik,czyja_tura, rodzaj_przecwnika);
            tura_przeciwnika(rodzaj_przecwnika_int, &czyja_tura,atak_przeciwnik);
        }
    break;
    case '4':
        {
            przebieg_walki_wglad(atak_przeciwnik, zycie_przeciwnik, obrona_przeciwnik, czyja_tura, rodzaj_przecwnika);
        }
    break;
    case '5':
        {
            int opcje=0;
            while(opcje==0)
            {

                system("cls");
                cout<<char(rog_l_g); for(int i=0; i<26; i++) cout<<char(poz_kres); cout<<char(rog_p_g)<<endl;
                cout<<char(pion_kres)<<"          OPCJE           "<<char(pion_kres)<<endl;
                cout<<char(trojnik_prawo); for(int i=0; i<26; i++) cout<<char(poz_kres); cout<<char(trojnik_lewo)<<endl;
                cout<<char(pion_kres)<<"1. Powrót do walki.       "<<char(pion_kres)<<endl;
                cout<<char(pion_kres)<<"2. Wróć do menu głównego. "<<char(pion_kres)<<endl;
                cout<<char(rog_l_d); for(int i=0; i<26; i++) cout<<char(poz_kres); cout<<char(rog_p_d)<<endl;

                char wybor_opcji;
                wybor_opcji=getch();
                switch(wybor_opcji)
                {
                case '1': opcje=1; break;
                case '2': {opcje=1, poddanie=1, powrot_do_menu=1; system("cls"); cout<<"Poddałeś się!"<<endl; Sleep(500);} break;
                default: { cout<<"Brak wybranej opcji!"<<endl; Sleep(500);}
                }
            }
        }
    break;
    default: {cout<<"Brak wybranej opcji!"<<endl; Sleep(500);}
    }

    }
}

void gra_kampania_menu_gry(int atak_przeciwnik,int zycie_przeciwnik,int obrona_przeciwnik, int czyja_tura, string rodzaj_przecwnika)
{
    int ilosc_walk=10;
    int dlugosc_nicku, dlugosc_nazwy, miejsce, miejsce2;
    dlugosc_nicku=nick.length(); miejsce=26-dlugosc_nicku-9;
    dlugosc_nazwy=rodzaj_przecwnika.length(); miejsce2=26-dlugosc_nazwy-9;

    obliczanie_statystyk();

    system("cls");
                      cout<<char(rog_l_g);      for(int i=0; i<53; i++)     {cout<<char(poz_kres);} cout<<char(rog_p_g)<<endl;
                      cout<<char(pion_kres);    for(int i=0; i<53/2-10; i++){cout<<" ";}  cout<<"KAMPANIA - Walka: "; if(nr_walki<10){cout<<"0";}{cout<<nr_walki;} for(int i=0; i<53/2-9; i++){cout<<" ";} cout<<char(pion_kres)<<endl;
    if(czyja_tura==0){cout<<char(pion_kres);    for(int i=0; i<53/2-5; i++) {cout<<" ";}  cout<<"Twoja tura";         for(int i=0; i<53/2-4; i++){cout<<" ";} cout<<char(pion_kres)<<endl;}
    if(czyja_tura==1){cout<<char(pion_kres);    for(int i=0; i<53/2-8; i++) {cout<<" ";}  cout<<"Tura przeciwnika";   for(int i=0; i<53/2-7; i++){cout<<" ";} cout<<char(pion_kres)<<endl;}
                      cout<<char(trojnik_prawo);for(int i=0; i<26; i++)     {cout<<char(poz_kres);} cout<<char(trojnik_dol); for(int i=0; i<26; i++) cout<<char(poz_kres); cout<<char(trojnik_lewo)<<endl;

    cout<<char(pion_kres)<<" "<<nick<<" "<<lvl_gracz<<"lvl"; if(dlugosc_nicku%2!=0){cout<<" ";} if(lvl_gracz<10){cout<<"  ";}else if(lvl_gracz<100){cout<<" ";} for(int i=0; i<miejsce; i++){cout<<" ";};
    cout<<char(pion_kres)<<" "<<rodzaj_przecwnika<<" "<<lvl_przeciwnik<<"lvl"; if(dlugosc_nazwy%2==0){cout<<" ";} if(lvl_przeciwnik<10){cout<<"  ";}else if(lvl_przeciwnik<100){cout<<" ";} for(int i=0; i<miejsce2; i++){cout<<" ";} cout<<char(pion_kres)<<endl;
    cout<<char(pion_kres)<<"        Atak:   "<<atak_gracz<<"       ";       if(atak_gracz<10)       {cout<<"  ";}   else if(atak_gracz<100)         {cout<<" ";};
    cout<<char(pion_kres)<<"        Atak:   "<<atak_przeciwnik<<"       ";  if(atak_przeciwnik<10)  {cout<<"  ";}   else if(atak_przeciwnik<100)    {cout<<" ";} cout<<char(pion_kres)<<endl;
    cout<<char(pion_kres)<<"        Zycie:  "<<zycie_gracz<<"       ";      if(zycie_gracz<10)      {cout<<"  ";}   else if(zycie_gracz<100)        {cout<<" ";};
    cout<<char(pion_kres)<<"        Zycie:  "<<zycie_przeciwnik<<"       "; if(zycie_przeciwnik<10) {cout<<"  ";}   else if(zycie_przeciwnik<100)   {cout<<" ";} cout<<char(pion_kres)<<endl;
    cout<<char(pion_kres)<<"        Obrona: "<<obrona_gracz<<"       ";     if(obrona_gracz<10)     {cout<<"  ";}   else if(obrona_gracz<100)       {cout<<" ";};
    cout<<char(pion_kres)<<"        Obrona: "<<obrona_przeciwnik<<"       ";if(obrona_przeciwnik<10){cout<<"  ";}   else if(obrona_przeciwnik<100)  {cout<<" ";} cout<<char(pion_kres)<<endl;
    cout<<char(trojnik_prawo); for(int i=0; i<26; i++) cout<<char(poz_kres); cout<<char(trojnik_gora); for(int i=0; i<26; i++) cout<<char(poz_kres); cout<<char(trojnik_lewo)<<endl;

    cout<<char(pion_kres); for(int i=0; i<53/2-2; i++) {cout<<" ";} cout<<"AKCJA"; for(int i=0; i<53/2-2; i++) {cout<<" ";} cout<<char(pion_kres)<<endl;
    cout<<char(pion_kres)<<"1. Silny atak.";      for(int i=0; i<53-14; i++){cout<<" ";} cout<<char(pion_kres)<<endl;
    cout<<char(pion_kres)<<"2. Szybki atak.";     for(int i=0; i<53-15; i++){cout<<" ";} cout<<char(pion_kres)<<endl;
    cout<<char(pion_kres)<<"3. Ekwipunek.";       for(int i=0; i<53-13; i++){cout<<" ";} cout<<char(pion_kres)<<endl;
    cout<<char(pion_kres)<<"4. Przebieg walki.";  for(int i=0; i<53-18; i++){cout<<" ";} cout<<char(pion_kres)<<endl;
    cout<<char(pion_kres)<<"5. Opcje.";           for(int i=0; i<53-9; i++) {cout<<" ";} cout<<char(pion_kres)<<endl;
    cout<<char(trojnik_prawo); for(int i=0; i<26; i++) cout<<char(poz_kres); cout<<char(poz_kres); for(int i=0; i<26; i++) cout<<char(poz_kres); cout<<char(trojnik_lewo)<<endl;

    if(zycie_przeciwnik<=0) wygrana_walka(ilosc_walk, atak_przeciwnik, zycie_przeciwnik, obrona_przeciwnik, czyja_tura, rodzaj_przecwnika);
    //else    cout<<char(trojnik_prawo); for(int i=0; i<26; i++) cout<<char(poz_kres); cout<<char(poz_kres); for(int i=0; i<26; i++) cout<<char(poz_kres); cout<<char(trojnik_lewo)<<endl;
}

void statystyki()
{

    int opcje=0;
    int dlugosc_nicku, miejsce;
    dlugosc_nicku=nick.length();
    miejsce=24-dlugosc_nicku;
    while(opcje==0)
    {

        obliczanie_statystyk();
        system("cls");
        cout<<char(rog_l_g); for(int i=0; i<24; i++) cout<<char(poz_kres); cout<<char(rog_p_g)<<endl;
        cout<<char(pion_kres)<<"       STATYSTYKI       "<<char(pion_kres)<<endl;
        cout<<char(trojnik_prawo); for(int i=0; i<24; i++) cout<<char(poz_kres); cout<<char(trojnik_lewo)<<endl;
        cout<<char(pion_kres); for(int i=0; i<miejsce/2; i++){cout<<" ";} cout<<nick; if(miejsce%2!=0){cout<<" ";} for(int i=0; i<miejsce/2; i++){cout<<" ";} cout<<char(pion_kres)<<endl;
        cout<<char(pion_kres)<<"                        "<<char(pion_kres)<<endl;
        cout<<char(pion_kres)<<"Dostepne punkty:["<<dostepne<<"]   "; if(dostepne<10){cout<<"  ";}else if(dostepne<100){cout<<" ";} cout<<char(pion_kres)<<endl;
        cout<<char(pion_kres)<<"Rozdane punkty: ["<<rozdane<<"]   "; if(rozdane<10){cout<<"  ";}else if(rozdane<100){cout<<" ";} cout<<char(pion_kres)<<endl;
        cout<<char(pion_kres)<<"1. Sila:        ["<<staty_suma_sila<<"]   "; if(staty_suma_sila<10){cout<<"  ";}else if(staty_suma_sila<100){cout<<" ";} cout<<char(pion_kres)<<endl;
        cout<<char(pion_kres)<<"2. Wytrzymalosc:["<<staty_suma_wytrzymalosc<<"]   "; if(staty_suma_wytrzymalosc<10){cout<<"  ";}else if(staty_suma_wytrzymalosc<100){cout<<" ";} cout<<char(pion_kres)<<endl;
        cout<<char(pion_kres)<<"3. Odpornosc:   ["<<staty_suma_odpornosc<<"]   "; if(staty_suma_odpornosc<10){cout<<"  ";}else if(staty_suma_odpornosc<100){cout<<" ";} cout<<char(pion_kres)<<endl;
        cout<<char(pion_kres)<<"4. Szczescie:   ["<<staty_suma_szczescie<<"]   "; if(staty_suma_szczescie<10){cout<<"  ";}else if(staty_suma_szczescie<100){cout<<" ";} cout<<char(pion_kres)<<endl;
        cout<<char(pion_kres)<<"5. Szybkosc:    ["<<staty_suma_szybkosc<<"]   "; if(staty_suma_szybkosc<10){cout<<"  ";}else if(staty_suma_szybkosc<100){cout<<" ";} cout<<char(pion_kres)<<endl;
        cout<<char(pion_kres)<<"6. Resetuj statystyki.  "<<char(pion_kres)<<endl;
        cout<<char(pion_kres)<<"                        "<<char(pion_kres)<<endl;
        cout<<char(pion_kres)<<"7. Powrot.              "<<char(pion_kres)<<endl;
        cout<<char(trojnik_prawo); for(int i=0; i<24; i++) cout<<char(poz_kres); cout<<char(trojnik_lewo)<<endl;
        cout<<char(pion_kres)<<"                        "<<char(pion_kres)<<endl;
        cout<<char(pion_kres)<<"      Atak:   "<<atak_gracz<<"       "; if(atak_gracz<10){cout<<"  ";}else if(atak_gracz<100){cout<<" ";} cout<<char(pion_kres)<<endl;
        cout<<char(pion_kres)<<"      Zycie:  "<<zycie_gracz<<"       "; if(zycie_gracz<10){cout<<"  ";}else if(zycie_gracz<100){cout<<" ";} cout<<char(pion_kres)<<endl;
        cout<<char(pion_kres)<<"      Obrona: "<<obrona_gracz<<"       "; if(obrona_gracz<10){cout<<"  ";}else if(obrona_gracz<100){cout<<" ";} cout<<char(pion_kres)<<endl;
        cout<<char(pion_kres)<<"                        "<<char(pion_kres)<<endl;
        cout<<char(rog_l_d); for(int i=0; i<24; i++) cout<<char(poz_kres); cout<<char(rog_p_d)<<endl;

        //Zrobiæ osobne inty na staty1-5 z stat, z eq, lvla itp. i to sumowaæ przy pokazaniu, ale do resetu itp
        //, potrzebne osobne

        char wybor_opcji;
        wybor_opcji=getch();
        switch(wybor_opcji)
        {
            case '1': {if(dostepne>0) {staty_sila++; dostepne--; rozdane++;} else {cout<<"Brak dostepnych punktow statystyk."<<endl; Sleep(200);}} break;
            case '2': {if(dostepne>0) {staty_wytrzymalosc++; dostepne--; rozdane++;} else {cout<<"Brak dostepnych punktow statystyk."<<endl; Sleep(200);}} break;
            case '3': {if(dostepne>0) {staty_odpornosc++; dostepne--; rozdane++;} else {cout<<"Brak dostepnych punktow statystyk."<<endl; Sleep(200);}} break;
            case '4': {if(dostepne>0) {staty_szczescie++; dostepne--; rozdane++;} else {cout<<"Brak dostepnych punktow statystyk."<<endl; Sleep(200);}} break;
            case '5': {if(dostepne>0) {staty_szybkosc++; dostepne--; rozdane++;} else {cout<<"Brak dostepnych punktow statystyk."<<endl; Sleep(200);}} break;
            case '6': {if(rozdane>0){dostepne+=rozdane; rozdane=0; staty_sila=0; staty_wytrzymalosc=0; staty_odpornosc=0; staty_szczescie=0; staty_szybkosc=0;}} break;
            case '7': {opcje=1;} break;
            default: {cout<<"Brak wybranej opcji!"<<endl; Sleep(500);}
        }

    }
}

void obliczanie_statystyk()
{
    staty_suma_sila=1; staty_suma_wytrzymalosc=1; staty_suma_odpornosc=1; staty_suma_szczescie=1; staty_suma_szybkosc=1;

    staty_suma_sila+=staty_sila;
    staty_suma_wytrzymalosc+=staty_wytrzymalosc;
    staty_suma_odpornosc+=staty_odpornosc;
    staty_suma_szczescie+=staty_szczescie;
    staty_suma_szybkosc+=staty_szybkosc;

    atak_gracz=1; zycie_gracz=1; obrona_gracz=1;

    int zbroja=0;
    atak_gracz=staty_suma_sila*1.5;
    zycie_gracz=staty_suma_wytrzymalosc*1.5;
    obrona_gracz=staty_suma_odpornosc*1.5+0.5*zbroja;
}

int kampania_przeciwnik (int *atak, int *zycie, int *obrona, int *rodzaj)
{
    lvl_przeciwnik=lvl_gracz+0.5*ukonczone_kampanie;

    if(*rodzaj==0) //szybki
    {
        *atak=lvl_przeciwnik*2.5+10;
        *zycie=lvl_przeciwnik*1.5+10;
        *obrona=lvl_przeciwnik*1+10;
    }
    else if(*rodzaj==1) //silny
    {
        *atak=lvl_przeciwnik*4+10;
        *zycie=lvl_przeciwnik*2.5+10;
        *obrona=lvl_przeciwnik*4+10;
    }
    else if(*rodzaj==2) //wilk
    {
        *atak=lvl_przeciwnik*3+10;
        *zycie=lvl_przeciwnik*4+10;
        *obrona=lvl_przeciwnik*2+10;
    }

    //return *atak, *zycie, *obrona, *rodzaj;
}

int obliczanie_atak(int wybrany_atak,int rodzaj_przecwnika_int,int szczescie, int lvl_gracz, int lvl_przeciwnik, int obrona_przeciwnik,int atak_gracz, int czyja_tura, int *zycie_przeciwnik)
{


    int atak_max=0, atak_min=1000000, atak_normal=0, atak[3], szczescie_ataku, atak_obliczenia, zadane_obrazenia, szansa_na_atak, ominiecie, dodatkowa_akcja[5]={-1,-1,-1,-1,-1};

        do
        {
        for(int i=0; i<=2; i++)
            {
                if (wybrany_atak==1)
                {
                    if(rodzaj_przecwnika_int==0) atak[i]=rand()%(atak_gracz+10)*3;
                    if(rodzaj_przecwnika_int==1) atak[i]=rand()%(atak_gracz+10)*1.5;
                    if(rodzaj_przecwnika_int==2) atak[i]=rand()%(atak_gracz+10)*2;
                }
                else if (wybrany_atak==0)
                {
                    if(rodzaj_przecwnika_int==0) atak[i]=rand()%atak_gracz+10;
                    if(rodzaj_przecwnika_int==1) atak[i]=rand()%atak_gracz+10;
                    if(rodzaj_przecwnika_int==2) atak[i]=rand()%atak_gracz+10;

                    //atak[i]=rand()%(atak_gracz+10)*2;
                }
                //else atak[i]=rand()%atak_gracz+10;
            }
            //getch();

            //if(atak[0]!=0&&atak[1]!=0&&atak[2]!=0)
            //{

            for(int i=0; i<3; i++)
            {
                if(atak[0]>=atak_max) atak_max=atak[0];
                else if (atak[0]<=atak_min) atak_min=atak[0];
                else atak_normal=atak[0];

                if(atak[1]>=atak_max) atak_max=atak[1];
                else if (atak[1]<=atak_min) atak_min=atak[1];
                else atak_normal=atak[1];

                if(atak[2]>=atak_max) atak_max=atak[2];
                else if (atak[2]<=atak_min) atak_min=atak[2];
                else atak_normal=atak[2];
                if(atak_normal==0) atak_normal=atak_max;
            }

            szczescie_ataku=rand()%20; //Tu można dodać bonusy do szczęścia
            if(szczescie>0.5*lvl_gracz+0.5*lvl_przeciwnik)
            {
                if(szczescie_ataku>=8) atak_obliczenia=atak_max;
                else atak_obliczenia=atak_normal;
            }
            else if(szczescie<0.2*lvl_gracz+0.2*lvl_przeciwnik)
            {
                if(szczescie_ataku>=15) atak_obliczenia=atak_normal;
                else atak_obliczenia=atak_min;
            }
            else
            {
                if(szczescie_ataku>=16) atak_obliczenia=atak_max;
                else if(szczescie_ataku>=4) atak_obliczenia=atak_normal;
                else atak_obliczenia=atak_min;
            }
            //atak_max=0, atak_min=1000000, atak_normal=0;
            } while(atak_obliczenia<atak_gracz*1.5&&wybrany_atak==1);

            //}
            //else
            //{
            //    atak_obliczenia=0;
            //    if(rodzaj_przecwnika_int=0) dodatkowa_akcja=0;
            //}

            if(wybrany_atak==1)
            {
                if(rodzaj_przecwnika_int==0)
                {
                    szansa_na_atak=rand()%20;
                    if(szansa_na_atak>3)
                    {
                        zadane_obrazenia=0;
                        dodatkowa_akcja[0]=0;
                    }
                }
                if(rodzaj_przecwnika_int==2)
                    szansa_na_atak=rand()%20;
                    if(szansa_na_atak>16)
                    {
                        zadane_obrazenia=0;
                        dodatkowa_akcja[0]=0;
                    }
            }

            if(wybrany_atak==0)
            {
                if(rodzaj_przecwnika_int==1) {ominiecie=rand()%20; if(ominiecie>14) dodatkowa_akcja[1]=0;}
                if(rodzaj_przecwnika_int==1&&dodatkowa_akcja[1]!=0&&dodatkowa_akcja[0]!=0) {ominiecie=rand()%20; if(ominiecie>3) dodatkowa_akcja[2]=0; zadane_obrazenia=0;}

                if(rodzaj_przecwnika_int==2) {ominiecie=rand()%20; if(ominiecie>16) dodatkowa_akcja[1]=0;}
            }

            if(atak_obliczenia<obrona_przeciwnik*0.75&&dodatkowa_akcja[1]!=0&&dodatkowa_akcja[0]!=0)
            {//Zablokowanie obrażeń
                zadane_obrazenia=0;
                dodatkowa_akcja[2]=0;
            }

                if(zadane_obrazenia!=0) zadane_obrazenia=atak_obliczenia;

            if(rodzaj_przecwnika_int==0)  {if(zadane_obrazenia>=obrona_przeciwnik*0.1) zadane_obrazenia-=obrona_przeciwnik*0.1;}

            if(rodzaj_przecwnika_int==1)  {if(dodatkowa_akcja[1]!=0&&zadane_obrazenia>=obrona_przeciwnik*0.75) zadane_obrazenia-=obrona_przeciwnik*0.75;}
            //if(rodzaj_przecwnika_int==1)  {zadane_obrazenia=atak_obliczenia; if(zadane_obrazenia>=obrona_przeciwnik*0.75) zadane_obrazenia-=obrona_przeciwnik*0.75;}

            if(rodzaj_przecwnika_int==2)  {if(dodatkowa_akcja[1]!=0&&zadane_obrazenia>=obrona_przeciwnik*0.5) zadane_obrazenia-=obrona_przeciwnik*0.5;}

            //zadane_obrazenia=atak_obliczenia;
            //zadane_obrazenia-=obrona_przeciwnik*0.75;
            int zycie_przeciwnik_2=*zycie_przeciwnik;

            zmiana_zycia_p(&zycie_przeciwnik_2, obrona_przeciwnik,zadane_obrazenia);
            *zycie_przeciwnik=zycie_przeciwnik_2;
            wyswietlanie_ataku(atak_obliczenia, zadane_obrazenia, czyja_tura, wybrany_atak, dodatkowa_akcja );

            //return wybrany_atak, szczescie, lvl_gracz, lvl_przeciwnik, atak_gracz;
            return *zycie_przeciwnik;
}

void wyswietlanie_ataku(int atak_obliczenia, int zadane_obrazenia, int czyja_tura,int wybrany_atak, int dodatkowa_akcja[])
{
    string tmp, zast_dlugosc; int zastepcza;
    if(wybrany_atak==1) {cout<<char(pion_kres);  cout<<"Silny atak za "<<atak_obliczenia<<"."; zastepcza=atak_obliczenia; sprintf((char*)tmp.c_str(), "%d", zastepcza); zast_dlugosc = tmp.c_str(); zastepcza=zast_dlugosc.length(); for(int i=0; i<53-15-zastepcza; i++) {cout<<" ";} cout<<char(pion_kres)<<endl;}
    if(wybrany_atak==0) {cout<<char(pion_kres);  cout<<"Szybki atak za "<<atak_obliczenia<<"."; zastepcza=atak_obliczenia; sprintf((char*)tmp.c_str(), "%d", zastepcza); zast_dlugosc = tmp.c_str(); zastepcza=zast_dlugosc.length(); for(int i=0; i<53-16-zastepcza; i++) {cout<<" ";} cout<<char(pion_kres)<<endl;}
    Sleep(100);
    if(dodatkowa_akcja[0]==0) {cout<<char(pion_kres);  cout<<" - Unik"; for(int i=0; i<53-7; i++) {cout<<" ";} cout<<char(pion_kres)<<endl;}
    if(dodatkowa_akcja[1]==0) {cout<<char(pion_kres);  cout<<" - Ominięcie obrony"; for(int i=0; i<53-19; i++) {cout<<" ";} cout<<char(pion_kres)<<endl;}
    if(dodatkowa_akcja[2]==0) {cout<<char(pion_kres);  cout<<" - Zablokowanie obrażeń"; for(int i=0; i<53-23; i++) {cout<<" ";} cout<<char(pion_kres)<<endl;}
    //

    //Miejsca na dodatkowe efekty, np. - obniżenie pancerza, efekt trucizny itp.
    Sleep(100);
    cout<<char(pion_kres); /*SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE),12);*/ cout<<"Zadane obrażenia "<<zadane_obrazenia<<"."; SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE),7); zastepcza=zadane_obrazenia; sprintf((char*)tmp.c_str(), "%d", zastepcza); zast_dlugosc = tmp.c_str(); zastepcza=zast_dlugosc.length(); for(int i=0; i<53-18-zastepcza; i++) {cout<<" ";} cout<<char(pion_kres)<<endl;
    cout<<char(rog_l_d); for(int i=0; i<53; i++) cout<<char(poz_kres); cout<<char(rog_p_d)<<endl;
    Sleep(100);

    //SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE),15);



    przebieg_walki_zapis(atak_obliczenia, zadane_obrazenia, czyja_tura, dodatkowa_akcja, wybrany_atak);
}

void przebieg_walki_zapis(int atak_obliczenia, int zadane_obrazenia, int czyja_tura, int dodatkowa_akcja[], int wybrany_atak)
{
    //Na początku walki pamiętać, żeby czyścić stary plik z walką
    fstream plik;
    plik.open("przebieg_walki.txt",ios::out|ios::app);



    if(czyja_tura==0)
    {
        plik<<"Twoja tura:"<<endl;
        if(wybrany_atak==1) plik<<"Silny atak za "<<atak_obliczenia<<"."<<endl;
        if(wybrany_atak==0) plik<<"Szybki atak za "<<atak_obliczenia<<"."<<endl;
        if(dodatkowa_akcja[0]==0) plik<<" - Unik"<<endl;
        if(dodatkowa_akcja[1]==0) plik<<" - Ominięcie obrony"<<endl;
        if(dodatkowa_akcja[2]==0) plik<<" - Zablokowanie obrażeń"<<endl;
        //, d_a_omin_obrony
        //
        plik<<"Zadane obrażenia "<<zadane_obrazenia<<"."<<endl;
        plik<<"──────────────────────────"<<endl;
    }
    else
    {
        plik<<"Tura przeciwnika:"<<endl;
        plik<<"Atak za "<<atak_obliczenia<<"."<<endl;
        //if(test==1) plik<<"Zablokowane obrażenia: 2"<<endl;
        plik<<"Zadane obrażenia "<<zadane_obrazenia<<"."<<endl;
        plik<<"──────────────────────────"<<endl;
    }
    plik.close();

}

void przebieg_walki_wglad(int atak_przeciwnik, int zycie_przeciwnik, int obrona_przeciwnik, int czyja_tura, string rodzaj_przecwnika)
{
    system("cls");

    fstream plik;
    plik.open("przebieg_walki.txt",ios::in);
    string linia; int dl;

    cout<<char(rog_l_g); for(int i=0; i<26; i++) cout<<char(poz_kres); cout<<char(rog_p_g)<<endl;
    cout<<char(pion_kres)<<"      Przebieg walki      "<<char(pion_kres)<<endl;
    cout<<char(trojnik_prawo); for(int i=0; i<26; i++) cout<<char(poz_kres); cout<<char(trojnik_lewo)<<endl;

    while(getline(plik,linia))
    {

        cout<<char(pion_kres); /*SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE),8);*/ cout<<linia; SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE),7); dl=linia.length(); for(int i=0; i<26-dl; i++) {cout<<" ";} cout<<char(pion_kres)<<endl;

    }
    plik.close();

    cout<<char(trojnik_prawo); for(int i=0; i<26; i++) cout<<char(poz_kres); cout<<char(trojnik_lewo)<<endl;
    cout<<char(pion_kres)<<"      1. Kontunuuj.       "<<char(pion_kres)<<endl;
    cout<<char(rog_l_d); for(int i=0; i<26; i++) cout<<char(poz_kres); cout<<char(rog_p_d)<<endl;
    getch();
    gra_kampania_menu_gry(atak_przeciwnik,zycie_przeciwnik,obrona_przeciwnik,czyja_tura, rodzaj_przecwnika);
}

int zmiana_zycia_p(int *zycie_przeciwnik, int obrona_przeciwnik, int zadane_obrazenia)
{
    if(*zycie_przeciwnik>0)
    {
        *zycie_przeciwnik-=zadane_obrazenia;
        if(*zycie_przeciwnik<0)
        *zycie_przeciwnik=0;
    }

    //return *zycie_przeciwnik;
}

int wygrana_walka(int ilosc_walk, int atak_przeciwnik, int zycie_przeciwnik, int obrona_przeciwnik, int czyja_tura, string rodzaj_przecwnika)
{
    zdobyte_dos=lvl_przeciwnik*2+5;

    cout<<char(pion_kres); for(int i=0; i<53/2-6; i++){cout<<" ";} cout<<"Zwycięstwo!!!";  for(int i=0; i<53/2-6; i++){cout<<" ";} cout<<char(pion_kres)<<endl;
    cout<<char(pion_kres)                           <<"Zdobyte łupy:";  for(int i=0; i<53-13; i++){cout<<" ";} cout<<char(pion_kres)<<endl;
    cout<<char(pion_kres)                           <<" - Doświadczenie: "<<zdobyte_dos; if(zdobyte_dos<10) {cout<<"  ";} else if(zdobyte_dos<100) {cout<<" ";} for(int i=0; i<53-21; i++){cout<<" ";} cout<<char(pion_kres)<<endl;
    cout<<char(pion_kres); for(int i=0; i<53; i++) {cout<<" ";} cout<<char(pion_kres)<<endl;
    cout<<char(trojnik_prawo); for(int i=0; i<53; i++) {cout<<char(poz_kres);} cout<<char(trojnik_lewo)<<endl;
    //cout<<char(pion_kres); for(int i=0; i<53; i++) {cout<<" ";} cout<<char(pion_kres)<<endl;
    if(nr_walki<ilosc_walk)  {cout<<char(pion_kres) <<"1. Kontynuuj podróż."; for(int i=0; i<53-20; i++) {cout<<" ";} cout<<char(pion_kres)<<endl;}
    if(nr_walki==ilosc_walk) {cout<<char(pion_kres) <<"1. Zakończ kampanię."; for(int i=0; i<53-20; i++) {cout<<" ";} cout<<char(pion_kres)<<endl;}
    cout<<char(pion_kres)                           <<"2. Przebieg walki."; for(int i=0; i<53-18; i++) {cout<<" ";} cout<<char(pion_kres)<<endl;
    //cout<<char(pion_kres); for(int i=0; i<53; i++) {cout<<" ";} cout<<char(pion_kres)<<endl;
    cout<<char(rog_l_d); for(int i=0; i<53; i++) {cout<<char(poz_kres);} cout<<char(rog_p_d)<<endl;

    char wybor_opcji;
    wybor_opcji=getch();
    switch(wybor_opcji)
    {
    case '2':
        {
            przebieg_walki_wglad(atak_przeciwnik, zycie_przeciwnik, obrona_przeciwnik, czyja_tura, rodzaj_przecwnika);
        }
    break;
    case '1':
        {
            if(nr_walki<ilosc_walk) {gra_kampania();}
            if(nr_walki==ilosc_walk)
            {
                system("cls");
                cout<<"Gratulacje, skończyłeś kampanię numer: "<<ukonczone_kampanie+1;
                system("pause");
            }
        }
    break;
    default: {cout<<"Brak wybranej opcji!"<<endl; Sleep(500); gra_kampania_menu_gry(atak_przeciwnik,zycie_przeciwnik,obrona_przeciwnik,czyja_tura, rodzaj_przecwnika);}
    }
}

int tura_przeciwnika(int rodzaj_przecwnika_int, int *czyja_tura, int atak_przeciwnik)
{
    int atak, zadane_obrazenia, zastepcza; string tmp, zast_dlugosc;

    if(rodzaj_przecwnika_int==0) atak=rand()%(atak_przeciwnik+10);
    if(rodzaj_przecwnika_int==1) atak=rand()%(atak_przeciwnik+10)*1.5;
    if(rodzaj_przecwnika_int==2) atak=rand()%(atak_przeciwnik+15);

    zadane_obrazenia=atak;
    zadane_obrazenia-=obrona_gracz*0.8;

    Sleep(500);
    //gra_kampania_menu_gry(atak_przeciwnik,zycie_przeciwnik,obrona_przeciwnik, czyja_tura, rodzaj_przecwnika);

    cout<<char(pion_kres)<<"Atak za "<<atak<<"."; zastepcza=atak; sprintf((char*)tmp.c_str(), "%d", zastepcza); zast_dlugosc = tmp.c_str(); zastepcza=zast_dlugosc.length(); for(int i=0; i<53-9-zastepcza; i++) {cout<<" ";} cout<<char(pion_kres)<<endl;
    Sleep(100);
    //cout<<char(pion_kres); for(int i=0; i<53; i++) {cout<<" ";} cout<<char(pion_kres)<<endl;
    cout<<char(pion_kres)<<"Zadane obrażenia "<<zadane_obrazenia<<"."; zastepcza=zadane_obrazenia; sprintf((char*)tmp.c_str(), "%d", zastepcza); zast_dlugosc = tmp.c_str(); zastepcza=zast_dlugosc.length(); for(int i=0; i<53-18-zastepcza; i++) {cout<<" ";} cout<<char(pion_kres)<<endl;
    cout<<char(rog_l_d); for(int i=0; i<53; i++) cout<<char(poz_kres); cout<<char(rog_p_d)<<endl;
    Sleep(500);
    *czyja_tura=0;

    //przebieg_walki_zapis(atak_obliczenia, zadane_obrazenia, czyja_tura, dodatkowa_akcja, wybrany_atak);
    //return *rodzaj_przecwnika_int, *czyja_tura, *atak_przeciwnik;
}
